Description: Don't write in not allocated packet_buff
 Each net_device in a system will automatically managed as a possible batman_if
 and holds different informations like a buffer with a prepared originator
 messages. To reduce the memory usage, the packet_buff will only be allocated
 when the interface is really added/enabled for batman-adv.
 .
 The function to update the hw address information inside the packet_buff just
 assumes that the packet_buff is always initialised and thus the kernel will
 just oops when we try to change the hw address of a not already fully enabled
 interface.
 .
 We must always check if the packet_buff is allocated before we try to change
 information inside of it.
Author: Sven Eckelmann <sven.eckelmann@gmx.de>
Bug-Debian: http://bugs.debian.org/593724

---
diff --git a/hard-interface.c b/hard-interface.c
index 60e8a56423766e2e69f55db561e42ede8c609a61..65a4a54ca91f6a05b84d21bacbfe293581a633e4 100644
--- a/hard-interface.c
+++ b/hard-interface.c
@@ -129,6 +129,9 @@ static bool hardif_is_iface_up(struct batman_if *batman_if)
 
 static void update_mac_addresses(struct batman_if *batman_if)
 {
+	if (!batman_if || !batman_if->packet_buff)
+		return;
+
 	addr_to_string(batman_if->addr_str, batman_if->net_dev->dev_addr);
 
 	memcpy(((struct batman_packet *)(batman_if->packet_buff))->orig,
@@ -339,6 +342,7 @@ static struct batman_if *hardif_add_interface(struct net_device *net_dev)
 	batman_if->if_num = -1;
 	batman_if->net_dev = net_dev;
 	batman_if->if_status = IF_NOT_IN_USE;
+	batman_if->packet_buff = NULL;
 	INIT_LIST_HEAD(&batman_if->list);
 
 	check_known_mac_addr(batman_if->net_dev->dev_addr);
